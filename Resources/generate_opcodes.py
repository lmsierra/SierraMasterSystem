#!/usr/bin/env python3 
# -*- coding: utf-8 -*- 

from ctypes import *
libc = cdll.msvcrt

init_comment = '/*\n\tAutogenerated File (generate_opcodes.py).\n*/\n\n'

opcode_timings = [
                    4,10, 7, 6, 4, 4, 7, 4, 4,11, 7, 6, 4, 4, 7, 4,
                    8,10, 7, 6, 4, 4, 7, 4,12,11, 7, 6, 4, 4, 7, 4,
                    7,10,16, 6, 4, 4, 7, 4, 7,11,16, 6, 4, 4, 7, 4,
                    7,10,13, 6,11,11,10, 4, 7,11,13, 6, 4, 4, 7, 4,
                    4, 4, 4, 4, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7, 4,
                    4, 4, 4, 4, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7, 4,
                    4, 4, 4, 4, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7, 4,
                    7, 7, 7, 7, 7, 7, 4, 7, 4, 4, 4, 4, 4, 4, 7, 4,
                    4, 4, 4, 4, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7, 4,
                    4, 4, 4, 4, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7, 4,
                    4, 4, 4, 4, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7, 4,
                    4, 4, 4, 4, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7, 4,
                    5,10,10,10,10,11, 7,11, 5,10,10, 0,10,17, 7,11,
                    5,10,10,11,10,11, 7,11, 5, 4,10,11,10, 0, 7,11,
                    5,10,10,19,10,11, 7,11, 5, 4,10, 4,10, 0, 7,11,
                    5,10,10, 4,10,11, 7,11, 5, 6,10, 4,10, 0, 7,11
                 ]

opcode_timings_cb = [
                    8, 8, 8, 8, 8, 8,15, 8, 8, 8, 8, 8, 8, 8,15, 8,
                    8, 8, 8, 8, 8, 8,15, 8, 8, 8, 8, 8, 8, 8,15, 8,
                    8, 8, 8, 8, 8, 8,15, 8, 8, 8, 8, 8, 8, 8,15, 8,
                    8, 8, 8, 8, 8, 8,15, 8, 8, 8, 8, 8, 8, 8,15, 8,
                    8, 8, 8, 8, 8, 8,12, 8, 8, 8, 8, 8, 8, 8,12, 8,
                    8, 8, 8, 8, 8, 8,12, 8, 8, 8, 8, 8, 8, 8,12, 8,
                    8, 8, 8, 8, 8, 8,12, 8, 8, 8, 8, 8, 8, 8,12, 8,
                    8, 8, 8, 8, 8, 8,12, 8, 8, 8, 8, 8, 8, 8,12, 8,
                    8, 8, 8, 8, 8, 8,15, 8, 8, 8, 8, 8, 8, 8,15, 8,
                    8, 8, 8, 8, 8, 8,15, 8, 8, 8, 8, 8, 8, 8,15, 8,
                    8, 8, 8, 8, 8, 8,15, 8, 8, 8, 8, 8, 8, 8,15, 8,
                    8, 8, 8, 8, 8, 8,15, 8, 8, 8, 8, 8, 8, 8,15, 8,
                    8, 8, 8, 8, 8, 8,15, 8, 8, 8, 8, 8, 8, 8,15, 8,
                    8, 8, 8, 8, 8, 8,15, 8, 8, 8, 8, 8, 8, 8,15, 8,
                    8, 8, 8, 8, 8, 8,15, 8, 8, 8, 8, 8, 8, 8,15, 8,
                    8, 8, 8, 8, 8, 8,15, 8, 8, 8, 8, 8, 8, 8,15, 8 
                 ]


opcode_timings_ed = [
                     8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
                     8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
                     8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
                     8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
                    12,12,15,20, 8,14, 8, 9,12,12,15,20, 8,14, 8, 9,
                    12,12,15,20, 8,14, 8, 9,12,12,15,20, 8,14, 8, 9,
                    12,12,15,20, 8,14, 8,18,12,12,15,20, 8,14, 8,18,
                    12,12,15,20, 8,14, 8, 8,12,12,15,20, 8,14, 8, 8,
                     8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
                     8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
                    16,16,16,16, 8, 8, 8, 8,16,16,16,16, 8, 8, 8, 8,
                    16,16,16,16, 8, 8, 8, 8,16,16,16,16, 8, 8, 8, 8,
                     8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
                     8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
                     8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
                     8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
                 ]

replacements = {
    'af'    : 'cpu.m_reg_AF',
    'bc'    : 'cpu.m_reg_BC',
    'de'    : 'cpu.m_reg_DE',
    'hl'    : 'cpu.GetPrefixedHL()',
    "af'"   : 'cpu.m_reg_AF_shadow',
    "bc'"   : 'cpu.m_reg_BC_shadow',
    "de'"   : 'cpu.m_reg_DE_shadow',
    "hl'"   : 'cpu.m_reg_HL_shadow',
    'hl*'   : 'cpu.m_reg_HL',
    'a'     : 'cpu.m_reg_AF.hi',
    'b'     : 'cpu.m_reg_BC.hi',
    'c'     : 'cpu.m_reg_BC.lo',
    'd'     : 'cpu.m_reg_DE.hi',
    'e'     : 'cpu.m_reg_DE.lo',
    'h'     : 'cpu.GetPrefixedHL().hi',
    'l'     : 'cpu.GetPrefixedHL().lo',
    'h*'    : 'cpu.m_reg_HL.hi',
    'l*'    : 'cpu.m_reg_HL.lo', 
    'r'     : 'cpu.m_reg_refresh',
    'i'     : 'cpu.m_reg_interrupt',
    '(af)'  : 'cpu.m_reg_AF.value',
    '(bc)'  : 'cpu.m_reg_BC.value',
    '(de)'  : 'cpu.m_reg_DE.value',
    '(hl)'  : 'cpu.GetPrefixedHLAddress()',
    '(hl*)' : 'cpu.m_reg_HL.value',
    'n'     : 'cpu.ReadByte()',
    '(n)'   : 'cpu.ReadByte()',
    'sp'    : 'cpu.m_stack_pointer',
    'nz'    : '!cpu.ReadFlag(FLAG::ZERO)',
    'z'     : 'cpu.ReadFlag(FLAG::ZERO)',
    'm'     : 'cpu.ReadFlag(FLAG::SIGN)',
    'p'     : '!cpu.ReadFlag(FLAG::SIGN)',
    'pe'    : 'cpu.ReadFlag(FLAG::PARITY_OVERFLOW)',
    'po'    : '!cpu.ReadFlag(FLAG::PARITY_OVERFLOW)',
    'C'     : 'cpu.ReadFlag(FLAG::CARRY)',
    'nc'    : '!cpu.ReadFlag(FLAG::CARRY)'
}


def create_header():
    text = ''
    with open('../Z80Instructions/Z80Instructions.h', 'w+') as file:
        text = init_comment
        text += '#pragma once\n\n#include <stdint.h>\n#include "Z80.h"\n\nnamespace Z80Instructions\n{\n'
        text += create_opcodes_functions('op_codes.txt', 'opcodes', opcode_timings)      
        text += '\tuint8_t UnexpectedOPCode(Z80& cpu)\n\t{\n\t\tcpu.UNUSED();\n\t\treturn 4;\n\t}\n\n'  
        text += '\tOPCodeFunc s_opcode_funcs [256] = \n\t{\n'
        for i in  range(256):
            text += '\t\t&opcodes0x%s%s\n' % (format(i, '02x'), ',' if i < 255 else '')            
        text += '\t};\n'
        text += '}\n'
        file.write(text)

def create_cb_headers():
    text = ''
    store_set = set()
    with open('../Z80Instructions/Z80CBInstructions.h', 'w+') as file:
        text = init_comment
        text += '#pragma once\n\n#include <stdint.h>\n#include "Z80.h"\n\nnamespace Z80Instructions\n{\n'
        text += create_opcodes_functions('op_codes_cb.txt', 'opcodesCB', opcode_timings_cb, store_set)       
        text += '\tOPCodeFunc s_opcode_cb_funcs [256] = \n\t{\n'
        for i in range(256):
            if i in store_set:
                text += '\t\t&opcodesED0x%s%s\n' % (format(i, '02x'), ',' if i < 255 else '')
            else:
                text += '\t\t&UnexpectedOPCode\n'           
        text += '\t};\n'
        text += '}\n'
        file.write(text)

def create_ed_headers():
    text = ''
    store_set = set()
    with open('../Z80Instructions/Z80EDInstructions.h', 'w+') as file:
        text = init_comment
        text += '#pragma once\n\n#include <stdint.h>\n#include "Z80.h"\n\nnamespace Z80Instructions\n{\n'
        text += create_opcodes_functions('op_codes_ed.txt', 'opcodesED', opcode_timings_ed, store_set)
        text += '\tOPCodeFunc s_opcode_ed_funcs [256] = \n\t{\n'
        for i in range(256):
            if i in store_set:
                text += '\t\t&opcodesED0x%s%s\n' % (format(i, '02x'), ',' if i < 255 else '')
            else:
                text += '\t\t&UnexpectedOPCode\n'
        text += '\t};\n'
        text += '}\n'
        file.write(text)

def create_opcodes_functions(src, func_prefix, time_table, stored_set = None):
    content = ''

    with open(src, 'r') as file:
        line = file.readline()
        
        while line:
            if 'UNUSED' in line:
                print("Continue %s" % line)
                line = file.readline()
                continue

            line_split = line.split()

            content += '\tinline uint8_t %s%s(Z80& cpu)\n\t{\n' % (func_prefix, line_split[0])
            content += '\t\tcpu.%s(' % line_split[1]
            for index, word in enumerate(line_split[2:]):
                if index > 0:
                    content += ', '
                if word in replacements.keys():
                    content += '%s' % replacements[word]
                else:
                    print('%s not found in replacement. OPCODE: %s' % (word, line_split[0]))
                    content += '%s' % (word)

            content += ');'
            num = int(line_split[0], 16)
            content += '\n\t\treturn %i;' % (time_table[num])
            content += '\n\t};\n\n'

            if stored_set != None:
                stored_set.add(int(line_split[0], 16))

            line = file.readline()

    return content; 

def main(): 
    create_header()
    create_cb_headers()
    create_ed_headers()

if __name__ == "__main__": 
	main() 